{"version":3,"sources":["images/leaf-branch.png","Navbar/styled.js","Navbar/index.js","Homepage/styled.js","Homepage/index.js","Project.js","AboutMe.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","styled","nav","NavList","ul","NavLi","li","NavLink","a","ContactButton","button","Navbar","href","HomepageContainer","div","IntroContainter","Name","h1","AboutMeButton","plantShakeTop","keyframes","TopBranch","img","plantShakeRight","RightBranch","Homepage","src","leaf_branch","alt","rotateFrom","rotateTo","Project","AboutMe","App","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,yC,ksCCEpC,IAAMC,EAAMC,IAAOC,IAAV,KAMHC,EAAUF,IAAOG,GAAV,KAUPC,EAAQJ,IAAOK,GAAV,KAILC,EAAUN,IAAOO,EAAV,KAUPC,EAAgBR,IAAOS,OAAV,KCVXC,EAnBA,WACb,OACE,kBAACX,EAAD,KACE,kBAACG,EAAD,KACE,kBAACE,EAAD,KACE,kBAACE,EAAD,CAASK,KAAK,MAAd,SAEF,kBAACP,EAAD,KACE,kBAACE,EAAD,CAASK,KAAK,aAAd,YAEF,kBAACP,EAAD,KACE,kBAACE,EAAD,CAASK,KAAK,aAAd,aAEF,kBAACH,EAAD,mB,kyDCdD,IAAMI,EAAoBZ,IAAOa,IAAV,KAOjBC,EAAkBd,IAAOa,IAAV,KAYfE,EAAOf,IAAOgB,GAAV,KAQJC,EAAgBjB,IAAOS,OAAV,KAepBS,EAAgBC,YAAH,KASNC,EAAYpB,IAAOqB,IAAV,IAOPH,GAQTI,EAAkBH,YAAH,KASRI,EAAcvB,IAAOqB,IAAV,IAMTC,GC9CAE,EAxBE,WACf,OACE,kBAACZ,EAAD,KACE,kBAAC,EAAD,MACA,kBAACQ,EAAD,CACEK,IAAKC,IACLC,IAAI,cACJC,WAAY,MACZC,SAAU,QAEZ,kBAACN,EAAD,CAAaE,IAAKC,IAAaC,IAAI,gBACnC,kBAACb,EAAD,KACE,6CACA,kBAACC,EAAD,iBACA,2IAE6C,KAE7C,kBAACE,EAAD,oBCnBOa,EATC,WACd,OACE,oCACE,kBAAC,EAAD,MACA,uCAFF,OCOWC,EATC,WACd,OACE,oCACE,kBAAC,EAAD,MACA,wCAFF,MCiBWC,MAdf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,cAAcC,UAAWZ,IAC3C,kBAAC,IAAD,CAAOW,KAAK,qBAAqBC,UAAWN,IAC5C,kBAAC,IAAD,CAAOK,KAAK,qBAAqBC,UAAWL,QCHlCM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ca48d0c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/leaf-branch.af90df3e.png\";","import styled from \"styled-components\";\n\nexport const Nav = styled.nav`\n  display: flex;\n  align-items: center;\n  justify-content: flex-end;\n`;\n\nexport const NavList = styled.ul`\n  display: flex;\n  align-items: center;\n  justify-content: space-around;\n  width: 30%;\n  @media screen and (max-width: 1000px) {\n    width: 40%;\n  }\n`;\n\nexport const NavLi = styled.li`\n  list-style: none;\n`;\n\nexport const NavLink = styled.a`\n  color: white;\n  text-decoration: none;\n  font-size: 20px;\n\n  @media screen and (max-width: 1100px) {\n    font-size: 15px;\n  }\n`;\n\nexport const ContactButton = styled.button`\n  background-color: transparent;\n  border: 1px solid white;\n  color: white;\n  outline: none;\n  padding: 7px 10px;\n  font-size: 20px;\n\n  &:hover {\n    background-color: white;\n    color: #9b7778;\n  }\n  @media screen and (max-width: 1100px) {\n    font-size: 15px;\n  }\n`;\n","import React from \"react\";\nimport { Nav, NavList, NavLi, NavLink, ContactButton } from \"./styled\";\n\nconst Navbar = () => {\n  return (\n    <Nav>\n      <NavList>\n        <NavLi>\n          <NavLink href=\"./\">Home</NavLink>\n        </NavLi>\n        <NavLi>\n          <NavLink href=\"./project\">Project</NavLink>\n        </NavLi>\n        <NavLi>\n          <NavLink href=\"./aboutme\">About Me</NavLink>\n        </NavLi>\n        <ContactButton>Contact</ContactButton>\n      </NavList>\n    </Nav>\n  );\n};\n\nexport default Navbar;\n","import styled, { keyframes } from \"styled-components\";\n\nexport const HomepageContainer = styled.div`\n  background-color: #9b7778;\n  padding: 0;\n  margin: 0;\n  min-height: 100vh;\n`;\n\nexport const IntroContainter = styled.div`\n  margin: auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n  width: 35%;\n  font-size: 20px;\n  margin: auto;\n  margin-top: 7%;\n`;\n\nexport const Name = styled.h1`\n  font-family: \"Oswald\";\n  font-size: 50px;\n  letter-spacing: 10px;\n  padding: 0;\n  margin: 0.5rem;\n`;\n\nexport const AboutMeButton = styled.button`\n  background-color: transparent;\n  font-size: 20px;\n  padding: 1rem 2rem;\n  color: white;\n  border: 1px solid white;\n  margin: 2rem;\n  cursor: pointer;\n\n  &:hover {\n    background-color: white;\n    color: #9b7778;\n  }\n`;\n\nconst plantShakeTop = keyframes`\nfrom {\n  transform: rotateZ(225deg);\n}\nto {\n  transform:rotateZ(215deg);\n}\n`;\n\nexport const TopBranch = styled.img`\n  position: absolute;\n  top: -15%;\n  left: 0%;\n  transform: rotate(215deg);\n  opacity: 0.5;\n  width: 470px;\n  animation: ${plantShakeTop} 5s infinite ease alternate-reverse 2s;\n\n  @media screen and (max-width: 1200px) {\n    width: 300px;\n    top: -8%;\n  }\n`;\n\nconst plantShakeRight = keyframes`\nfrom {\n  transform: rotateZ(7deg);\n}\nto {\n  transform: rotateZ(0deg);\n}\n`;\n\nexport const RightBranch = styled.img`\n  position: absolute;\n  top: 36%;\n  right: -1%;\n  opacity: 0.5;\n  width: 470px;\n  animation: ${plantShakeRight} 5s infinite ease alternate-reverse 2s;\n\n  @media screen and (max-width: 1200px) {\n    width: 300px;\n    top: 60%;\n  }\n`;\n","import React from \"react\";\nimport Navbar from \"../Navbar\";\nimport leaf_branch from \"../images/leaf-branch.png\";\n\nimport {\n  HomepageContainer,\n  IntroContainter,\n  Name,\n  AboutMeButton,\n  TopBranch,\n  RightBranch,\n} from \"./styled\";\n\nconst Homepage = () => {\n  return (\n    <HomepageContainer>\n      <Navbar />\n      <TopBranch\n        src={leaf_branch}\n        alt=\"leaf branch\"\n        rotateFrom={\"225\"}\n        rotateTo={\"215\"}\n      />\n      <RightBranch src={leaf_branch} alt=\"leaf branch\" />\n      <IntroContainter>\n        <p>Hi, my name is</p>\n        <Name>JINA ZHU</Name>\n        <p>\n          I'm a software engineer based in San Francisco, CA specializing in\n          writing clean, elegant, and efficent code.{\" \"}\n        </p>\n        <AboutMeButton>About Me</AboutMeButton>\n      </IntroContainter>\n    </HomepageContainer>\n  );\n};\n\nexport default Homepage;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\n\nconst Project = () => {\n  return (\n    <>\n      <Navbar />\n      <h1>Project</h1>);\n    </>\n  );\n};\n\nexport default Project;\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\n\nconst AboutMe = () => {\n  return (\n    <>\n      <Navbar />\n      <h1>About Me</h1>;\n    </>\n  );\n};\n\nexport default AboutMe;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Homepage from \"./Homepage\";\nimport Project from \"./Project\";\nimport AboutMe from \"./AboutMe\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/portfolio/\" component={Homepage} />\n          <Route path=\"/portfolio/project\" component={Project} />\n          <Route path=\"/portfolio/aboutme\" component={AboutMe} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}